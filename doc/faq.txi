\input texinfo @c %**start of header -*-texinfo-*-
@setfilename faq.info
@settitle Sd Frequently Asked Questions
@c Time-stamp: <13 Aug 2005 wba>

@sp 2
@noindent Copyright @copyright{} 1996-2005 William B. Ackerman

@contents

@unnumberedsec The options for sessions and abridgement files are confusing!

You may find that @code{Sd} is more user-friendly than @code{Sdtty},
particularly if you are having trouble with sessions or abridgement
files.  It will show you the startup options more clearly.  You can type
commands at @code{Sd} the same way you type at @code{Sdtty}.  It just
looks different.  During the @code{Sd} startup screen, you may want to
look at the help text for each item before using it.  Click on the
question mark in the upper right corner, and then click on the item of
interest.  This may help explain what is going on.

Anything that you set up with @code{Sd} can be used with @code{Sdtty}.

@unnumberedsec How can I set up and use the ``sessions'' feature?

First, it is better to do this in Sd, not Sdtty, even if you use Sdtty
for normal writing.  See the previous question.

Sessions are used to keep track of the levels, sequence numbers, and
similar things for the various workshops, dances, and conventions you
might be writing material for.  You can create a session for each
workshop, and then select the session each time you start the program.

You must have an ``initialization file'' to use sessions.  It is easy to
create one.  If you don't have one, @code{Sd} or @code{Sdtty} will print
this whenever it starts up:

@example
@group
   You do not have a session control file.  If you want to
   create one, give the command "initialize session file".
@end group
@end example

Do that.  Then exit from the program and start it again.  Some sample
sessions will now be active.

Once sessions are active and are presented during startup, you can use
them by clicking on the desired session in @code{Sd}, or typing its
number in @code{Sdtty}.  The level, output file name, starting sequence
number, and header title will be set for you.

If you want to create a new session, click or type the item labeled
"(create a new session)".  You will be asked for the level.  Enter that.
You will then be asked for the file name.  We recommend giving a "+"
sign.  This will cause all sequences to be written to a file with a name
based on the current date.  You will then be asked for the header title.
This will be printed at the top of every sequence written for that
session.

@unnumberedsec How can I set up an ``abridge'' list for a session?

First, it is better to do this in Sd, not Sdtty, even if you use Sdtty
for normal writing.  See the previous two questions.

Abridge lists are used for writing material for a class or workshop,
using only the calls that the class knows at any given time.

To set up a session with abridgement, start Sd.  In the startup screen,
click "write list".  The "abridgement file name" will light up.  Fill it
in with the name of the file you want to use with that session.
("abridge.txt" is not a very creative name.)  Remember that file name.
Then double-click "no session" and double-click the level that you want.

Start Sd again.  Click "use abridged list", and fill in the
same file name (again! sorry!)  Then double-click "create
new session" and double-click the lavel.  A popup will appear,
for the output file name.  Change it to a single "+" sign,
unless you are a masochist.  (Or a "*" sign if you prefer,
and if you know the difference.)  Click "accept".  A new
popup asks for the session title.  Enter it (e.g. "my C2
group") and click "accept".  You are now in business.

Edit the file (it's in the "C:\Sd" directory) to delete calls, as you
teach the group.  Whenever you start Sd or Sdtty, it should offer the
new session.  It will read the abridgement file and act accordingly.

See the manual, under ``abridgement'', for detailed instructions on
how to maintain an abridge list.

If you really want to do the initial setup in Sdtty, it could be
accomplished with:

@example
@group
sdtty -write_list my_group_list.txt c2
sdtty -abridge my_group_list.txt c2
Type the number associated with "create a new session".
Type a "+" sign, or whatever file name you want.
Type the session title.
@end group
@end example

@unnumberedsec How can I tell how many sequences I have written in the current session?

First, you must be using the ``sessions'' feature.  When running either Sd or Sdtty,
the title bar of the window will show the sequence number at the start of the
current run of the program, and the sequence number right now.  The title might
look like "Sdtty C3 AACE (12:22)"  The first number in parentheses gives the number
with which the current run started, and the second number shows the current sequence
number.  In this example, 10 sequences have been written during the current run.

@unnumberedsec Entering complex calls is confusing!

If in doubt about how to enter some complex call, type part of the call
and a question mark.  For example, if you want to know how to modify the star
turn on a chain reaction, type @strong{chain reac?}.  Then, following its hint,
type @strong{tion, turn the star 1/2}.

@unnumberedsec I've heard that @code{Sd} lets me type subcalls directly, but it's confusing!

You may have heard that @code{Sd} lets you type complex calls directly,
using brackets, as in @strong{catch [motivate] 3}.  This is true, but you
may find it unwieldy, especially if you have been using @code{SRC Sd}
and are accustomed to entering things piecemeal.  You can still do it
that way.  Remember to type @strong{<anything>}, not just @strong{<any>}.  For
example, type @strong{catch <anything> 3}.  (Not sure about that?  Type
@strong{catch?})  Then type the @strong{motivate}.

@unnumberedsec I can't seem to enter simple things like @strong{right and left thru}.

If you are having really serious problems like this, use @code{Sd} instead of
@code{Sdtty}.  Look at the menu and see how it wants things to be spelled.

@unnumberedsec I want some special option, such as @code{-normal_video}.  How can put it in an icon or initialization file?

You have (or can create) an initialization file, which is ``C:\sd\sd.ini''.
If you put options in it, you will get those options every time you run
@code{Sd} or @code{Sdtty}.  If you don't have such a file, give the
command @strong{initialize session file} to @code{Sd} or @code{Sdtty} to
create it.  Then edit it.  Use a plain text editor such as Emacs or
Notepad---do not use a word processor.  You will see a section called
``[Options]''.  Add whatever options you like.  Do not put hyphens in front
of options in this file.  For example:

@example
@group
[Options]            <-- you will probably find that these
new_style_filename   <-- two lines are already present
normal_video
color_by_couple
@end group
@end example

All of this works the same under Windows or Linux, except that, under
Linux, the location of the ``sd.ini'' file will be wherever you
installed the program.

You can also create Windows icons that run the program with specific
options, such that the options will depend on which icon you operate.
To do this, make a copy of whichever icon from the @code{Sd} group in
the Start Menu is closest to what you want.  How this works depends on
exactly what version of Windows you have, but it generally involves
right-clicking the icon, or going to Start->Settings->Taskbar->Start
Menu Programs->Advanced.  Either way, you should be able to copy and
paste it, and right-click it to rename it or edit its properties.  Put
the copied icon wherever you want---desktop, Start Menu, or wherever.
Rename it to whatever you want.  Then edit its properties.  When editing
its properties, you can change the icon that is displayed, and you can
add options by selecting the ``shortcut'' tab.  On the ``target'' line,
you will see something like ``C:\sd\sdtty.exe'' perhaps followed by some
options.  Change those to whatever you want.  Put hyphens in front of
all options when editing an icon. For example, ``C:\sd\sdtty.exe
-single_click c1'' or ``C:\sd\sdtty.exe -color_by_couple -session 2''.
The latter would always select whatever session 2 means in your
initialization file, complete with its title, level, and file name.

@unnumberedsec How can I change the Sd window size?

Users have different preferences about how big they want the
@code{Sd} window size to be.  Furthermore, graphics resolution
settings can vary significantly.  By default, @code{Sd} makes an
arbitrary decision about this, which is generally 780 x 560 pixels.
If this doesn't suit you or your graphics hardware, you can change
it with the ``window_size'' option.  Follow the option with
2 numbers separated by a lower case ``x'' but no whitespace,
as in

@example
@group
   window_size 1000x720
@end group
@end example

You can put that line into the ``[Options]'' section of your initialization
file, which is C:\sd\sd.ini, so that section might look like

@example
@group
[Options]
new_style_filename
window_size 1000x720
@end group
@end example

Doing so will affect every copy of Sd on your computer.  If you want to
have different icons to start Sd, and you want to control the window
size separately for each icon, follow the instructions in the
``command-line options'' section of the manual.

@unnumberedsec What are ``new style file names'', and how can I switch over to using them?

New style file names are names like ``13aug05_c1.txt'' if you use
sessions with the "+" file name generation mechanism, or
``sequence_c1.txt'' if you don't.  The old style names are like
``13aug05.c1'' or ``sequence.c1''.  The part after the period is called
the "extension".  When using Windows or some other operating systems, it
is very helpful for files to have a correct extension, and ".txt" is the
right extension for these files.  For example, attaching files in email
messages is sometimes facilitated by having the ".txt" extension.

Newly created session files use new style names.  Older session files
may use old style names.  If you don't use a session file, you get old
style names, though this may change in the future.

If you already have a session file, and you want to change it over to
new style names, give the command @strong{change to new style filename}
right after starting the program.

When you change to new style file names, no previously written files
will be renamed.  Only newly created files will have the new names.

@unnumberedsec How can I uninstall @code{Sd}?

@code{Sd} has no complex interactions with other software, and does not
need to ``register itself'' as an installed program.  As such, it will
not appear on the menu for uninstalling software.  If you want to
uninstall it, all you need to do is delete the C:\sd folder, and delete
whatever startup icons you may have placed.

@unnumberedsec How can I define ``hot keys''?

Edit (with a plain text editor such as Emacs or Notepad---do not use a
word processor) the initialization file C:\sd\sd.ini.  If you don't have
such a file, give the command @strong{initialize session file} to @code{Sd} to
create it.  Then edit it.  You will see a section called ``[Accelerators]''
with things like

@example
@group
f3     pick random call
@end group
@end example

In that line, ``f3'' means function key 3.  (That is the line that makes
function key 3 perform the ``pick random call'' operation.  You can change
it if you want.)

You can add lines to this section to define ``hot keys'' that specify
calls, concepts, or commands.  Since I don't like to type ``concentric'',
my file contains

@example
@group
az     concentric
cz     cross concentric
caz    single concentric
@end group
@end example

These define alt-Z as ``concentric'', control-Z as ``cross concentric'',
and control-alt-Z as ``single concentric''.  Prefix letters of @strong{a},
@strong{s}, @strong{c}, and @strong{ca} denote alt, shift, control, and
control-alt, respectively.  After that, a plain letter or digit denotes
that key.  A combination like @strong{f6} denotes that function key.  When
defining function keys, you may use the @strong{s} prefix, or no prefix at
all, to get shift-function-key or plain-function key.  With letters or
digits, you must use some combination of alt or control.  (You can't
define just @strong{c} as a hot key for concentric---it would make it
impossible to type @strong{circulate}.)

@unnumberedsec How can I define abreviations for calls?

First, read the previous section.  Abbreviations are defined somewhat
like hot keys, but they don't take effect the instant you press the key.
You have to press @strong{<ENTER>}, just as for any call or concept.
Also, they don't involve meta or control modifiers.  They can be multiple
letters long, just like call names, but they must be one word.

Now find the ``[Abbreviations]'' section of sd.ini, with things like

@example
@group
u       U-turn back
rlt     right and left thru
@end group
@end example

This means that you can type @strong{rlt} as if it were a call.  It will be
expanded to the full call in the transcript file.  (Yes, those
abbreviations are actually there.)  You can add things like

@example
@group
p       pass thru
@end group
@end example

@unnumberedsec Why can't I put blanks in the output file name?

Sorry, but doing so would make it impossible to process session descriptors
in the initialization file.

@unnumberedsec How can I abort a sequence in progress?

If you select the @strong{abort} command, the program will abort the sequence
(but not exit).  It will go back to the startup menu to allow you to
start another sequence.  It will ask for confirmation first.

@unnumberedsec Why can't it do things like @strong{men run} or @strong{ladies trade}?

The program only recognizes the designators @strong{boys} and @strong{girls}.
The only exception is the call @strong{ladies chain}.  Of course, you can
use whatever designation you want when calling.

@unnumberedsec The Callerlab definitions allow @strong{veer left} and @strong{veer right} with single people.  Why doesn't @code{Sd} allow this?

@code{Sd} considers this situation ambiguous, so you need to say
@strong{single veer left} or @strong{single veer right}.  Whether you
need to say this when calling is up to you.

@unnumberedsec Isn't @strong{remake the column} a ``grand'' call even without saying so?

No.  The Callerlab definitions say that, unless in a thar or alamo, this
is a 4-person call.  It is not @strong{grand} unless you say so.  If you
believe that just saying @strong{remake the column} might confuse the
dancers, don't do it.

@unnumberedsec How can I identify the center wave of 6 in a 3x1 diamond?

This is the setup that you would get after, for example, @strong{1/2
acey deucey} from waves.  There will be a center wave of 6.  To
designate those people, say @strong{center 1x6}, or the more specific
designators @strong{center wave of 6}, @strong{center line of 6}, or
@strong{center column of 6}.  The designator @strong{center 6}
designates different people---all but the two people at the very ends of
that wave.  So you can say things like @strong{center wave of 6 grand swing
thru}.  You probably don't need to call it that way---the dancers will
know what you mean if you say @strong{center 6 grand swing thru}.

The same situation occurs after @strong{sets in motion but hold the column}.
Use the designator @strong{center column of 6}.

@unnumberedsec How can I do @strong{plenty} from diamonds?

Notwithstanding the Callerlab definitions, the program considers @strong{plenty}
@emph{always} to have the outsides quarter right.  There is a call @strong{plenty,
ends go as you are} that gets the action that you probably want.

@unnumberedsec How can I call @strong{boys start quarter thru} from C1 phantoms?

Just like that: @strong{boys start quarter thru}, or @strong{boys start 1/4
thru} (either spelling is accepted.)  The @strong{<ANYONE> start} concept
has the indicated people do their own part of the first part of the
call, after which the others join them.  You give a person indicator
like @strong{boys} in place of the @strong{<ANYONE>}.  Or, if like, you may
literally type the @strong{<ANYONE>}, complete with angle brackets.  The
program will then ask for the person indicator.

If using @code{Sd} with the menu and mouse, you must find the concept listed
under @strong{<ANYONE> start}, not @strong{boys start}.

@unnumberedsec How can I do things like @strong{heads promenade halfway, come in to the middle for a right and left thru}?

Start the sequence with the @strong{heads start} command, and give the
call @strong{promenade halfway, come in to the middle and [right and
left thru]}, or whatever call you want.  That call must be in square
brackets, as shown.  The comma is optional.  You can also do
@strong{promenade halfway, while the others [right and left thru]},
or @strong{promenade 3/4, while the others [right and left thru]}, or 1/4.
In all cases the people who do the call in brackets will be in the middle,
and the others will be as couples on the outside.

Remembering all this isn't easy.  Just type @strong{prom} followed by a
question mark, and the program will remind you of what to do.

@unnumberedsec How can I do @strong{girls trade} from blocks, as in @strong{girls press ahead and trade}?

Just type it.  But there is no call @strong{press ahead and trade}.  You must say
@strong{girls press ahead} followed by @strong{girls trade}.

Previous versions of the program required you to say @strong{in your blocks girls trade}.

@unnumberedsec How can I do @strong{pinwheel}?

If you are in a promenade setup, type something like @strong{sides lead
for a pinwheel}.  The program will give you a rough guess of how far it
thought the dancers promenaded before doing the call.  You can also do
@strong{ends pinwheel} or @strong{centers pinwheel} from applicable
formations such as tidal lines.

@unnumberedsec How can I change the star turns on Chain Reaction?

The short answer to the question is that you type ``chain reaction, turn
the star 1/2'', or ``motivate, don't turn the star'', or something
similar.

But the more important question is: ``How do you know that?''.  There
are many common ways of modifying calls, and many ways of expressing
those modifications in words.  Sd is not known for its deep
understanding of colloquial English.  How do you know what the required
words are?

Type part of the call, immediately followed by a question mark.
If you type ``motiv?'' you will see
@example
@group
   motivate, don't turn the star
   motivate, turn the star 1/4
   motivate, turn the star 1/2
   motivate, turn the star 3/4
motivate
   motivate, don't turn the star but <ANYTHING>
   motivate, turn the star 1/4 but <ANYTHING>
   motivate, turn the star 1/2 but <ANYTHING>
   motivate, turn the star 3/4 but <ANYTHING>
motivate but <ANYTHING>
@end group
@end example

This should tell you what you need to know.  At that point you can type
``ate, don't turn the star''.  (Remember, you already typed ``motiv''.)

Suppose the ``<ANYTHING>'' piques your curiosity.  This is a
modification for the final centers' cast off 3/4.  Try it.  Issue the
call ``motivate but <anything>''.  The upper case is optional.  You will
be prompted for a subsidiary call.  Type ``2/3 recycle''.  You will then
see ``motivate but [2/3 recycle]''.  You could also have entered the
call exactly that way.  Whenever the ``?''  printout shows
``<ANYTHING>'', you can type a subcall instead, in square brackets.  Not
angle brackets.

You can also experiment with things by giving the ``allow modifications''
command and then trying the call, but this method is somewhat unwieldy.
If you type

@example
@group
allow modifications
motivate
@end group
@end example

You will be asked about modifying the initial circulate, the star turn,
and the final cast off 3/4.

By the way, if you don't want to type commas or apostrophes, that's OK.
They're optional.  Capitalization is also optional.  But subsidiary calls
@emph{must} be in square brackets.

@unnumberedsec How can I do a Load the Boat, centers do just 3-1/2 parts?

Say @strong{centers work 7/8 load the boat}.  Telling people to do only part of
a call is generally done in terms of fractions, not number of parts.
3-1/2 of the 4 parts of ``Load the Boat'' is 7/8ths of it.  You want just
the centers to obey that, so you use the @strong{centers work} meta-concept,
followed by the concept (@strong{7/8}) that you want them to obey.

@unnumberedsec How can I do things like Centers Work As Couples, all Here Comes the Judge?

The best way is to say @strong{centers are as couples here comes the
judge}.  For every couples/tandem-type concept, there is also an
@strong{<anyone> are <concept>} version of it.  For example, @strong{center 6
are tandem threesome 1/4 solid}.  So you could say @strong{centers are as couples here
comes the judge}.  The ``all'' word is often spoken but is never typed in to @code{Sd}
or @code{Sdtty}.

There is also a meta-concept @strong{<anyone> work <concept>} that you can
use.  It has the designated people do the call with the concept while
the others do it normally.  However, it is a much more problematical and
difficult meta-concept.  When the concept is a couples/tandem-type
concept, ``are'' is much better than ``work''.

@unnumberedsec How can I do things like Centers Work Stable, all Here Comes the Judge?

The answer is essentially the same as for the previous question.  When the
concept is stable or fractional stable, there is also an
@strong{<anyone> are <concept>} version of it.  As with the previous question,
``are'' is preferable to ``work''.

@unnumberedsec How can I call @strong{split phantom lines in roll circulate}?

In all concepts that can specify either lines or waves, the ``waves''
version has an implicit @strong{assume waves} operation in it.  Under
normal circumstances, this means that the live people can make use of
the assumption of waves in order to decide how to start the call.

For example,
in normal columns, @strong{split phantom waves in roll circulate}, which
is equivalent to @strong{split phantom lines, assume waves, in roll circulate},
is legal, since the phantom in-roller's location can be deduced from the
wave assumption.

The call @strong{split phantom lines in roll circulate} is illegal from columns
because the facing direction of the phantom in-roller is unknown.

@unnumberedsec Why can't it do @strong{tandem} or @strong{couples} concepts in large formations?

If you have this problem, try giving the @strong{phantom} concept, as in
@strong{phantom tandem} or whatever.  The program needs to know exactly
how to pair people into tandems or couples, which may require the use of
some concept to specify the matrix or the details of the geometry.

@unnumberedsec Why does it complain about things like magic split circulate?

Because there's no such call.  You should be using @strong{split trade circulate}.
Similarly, you should use @strong{split trade couple up} instead of
@strong{magic couple up}, and @strong{cross walk and dodge} instead of
@strong{magic walk and dodge}.

@unnumberedsec Why doesn't it allow some simple things like boys trade?

The @strong{<anyone> trade} call is extremely complex, because it has to
allow the people trading to be nonadjacent.  This means that
@strong{<anyone> trade} is not just an instance of the @strong{<anyone>}
concept applied to the call @strong{trade}.  @code{Sd} tries to allow you
to type everything all on one line.  It sometimes fails in this case.
If something like @strong{boys trade} doesn't work when typed together, try
typing the @strong{boys} designator, pressing @strong{<ENTER>}, and then typing
the @strong{trade} call.

@unnumberedsec How can I use the @strong{two-faced} concept?

It isn't clear that this is actually something that needs to be
said---modern challenge choreography seems to have adopted the position
that you just do your part anyway.  So just give the call.  A warning
may be printed, such as "Do your part" or "This is an unusual setup for
this call".  You may or may not choose to say "two-faced" when calling.

@unnumberedsec How can I do @strong{same sex disconnected}?

Just like that.  Type, for example, @strong{same sex disconnected swing thru}.
Each sex does that call in their disconnected setup.

@unnumberedsec How can I type @strong{all 8 recycle and circle 1/4}?

How about @strong{flip the diamond and circle 1/4}?  How do I tell
the program whether it's a 4 person or an 8 person call?

The program recognizes a call @strong{[anything] and circle N/4}.
It tries the ``anything'' call first with just the centers, and
with all 8 people if that fails, so it should work in either case.
You can type the fraction as 1/4, 1/2, 3/4, 2/4, or ``full''.

As with all calls of this sort, the ``official'' name of the call
uses angle brackets to indicate something that gets filled in:
@strong{<ANYTHING> and circle <N/4>}.  You can literally enter the call
that way.  (If using @code{Sd} and the menu, that's the way you have
to enter it.  Calls starting with things in angle brackets are
alphabetized at the end of the call menu, but before the concepts.)
If you enter the call that way, the program will ask you about the
things that need to be filled in.

@example
@group
   <anything> and circle <n/4>
   how many?
   2
   subsidiary call
   switch the line
@end group
@end example

But a much easier way is to type everything directly.  Remember
that, while angle brackets are used in the ``official'' name of the
call, you use square brackets when you type subcalls.  And you
just type numbers and similar things directly.

@example
@group
   [switch the line] and circle 1/2
@end group
@end example

How do you know that that call is available?  @code{Sd} has many calls
with tricky syntax like that.  It will usually accept what you want to
type.  But there are many tricky areas.  If you are confused, the right
thing is to type part of the call, followed by a question mark.

@unnumberedsec How can I do a shadow box couple up?

Sometimes the following confusing thing happens.  You want to
do a @strong{shadow box couple up}, so you type:

@example
@group
   shadow box [couple up]
@end group
@end example

and all you get is

@example
@group
   shadow box [couple up]  (129 matches, type ! or ? for list)
@end group
@end example

so you do so, and get

@example
@group
shadow box [couple up] and a quarter more
shadow box [couple up] and cross
shadow box [couple up] and roll
shadow box [couple up] and sweep <N/4>
shadow box [couple up] and the <ANYONE> roll
shadow box [couple up] and <N/4> more
shadow box [couple up] by golly
shadow box [couple up] er's cover up but <ANYTHING>
shadow box [couple up] like a couple up
shadow box [couple up] the k but <ANYTHING>
shadow box [couple up] the key
shadow box [couple up] the windmill, outsides <ANYTHING>
shadow box [couple up] with the flow
@end group
@end example

and you wonder ``Why won't it let me do a normal one?''

The issue is whether @strong{shadow box} is a concept, or
a call with a subcall.  If it's a concept, you should just
type @strong{shadow box couple up}.  But if it's a call that takes
a subcall, you should use brackets.  How do you know?

That isn't easy to answer.  Where to draw the line isn't well
established, so @code{Sd} makes decisions that may seem arbitrary.
There is no way to avoid this.  Most things are obvious, of
course, like the @strong{as couples} concept.  And it should be fairly
obvious from usage that @strong{breaker [2/3 recycle]} is a call with
a modifier.  Why is that obvious?  Because @strong{breaker N} is a call,
and it is obvious that @strong{breaker [anything]} just has the
@strong{anything} replace some pre-existing part of the call.

Of course, anything that takes the modifier other than at the
end, must be a call with a modifier, since concepts are always
typed first.  Hence @strong{[anything] and roll} always uses brackets.

So, if you are having trouble of this sort, try adding brackets
or leaving them out.

@unnumberedsec In a parallelogram, how can I specify the ``wings''?

@code{Sd} has a rather fussy, but, we hope, serviceable nomenclature for
identifying people.  (Remember that, when calling to live dancers, you
can take advantage of their common sense.  They will generally figure
out what you mean from the context and from their experience.  Computers
can't do that.)

The phrase @strong{outer pairs} is used to specify these people, and
@strong{center 4} to specify the others.  Note that @strong{center 4} is not
the same as @strong{centers}.  The designators @strong{centers} and @strong{ends}
are meaningless in setups like this.

The @strong{center 4} do not need to be in a 2x2.  In common-point diamonds
or a common-point hourglass (the result of @strong{6x2 acey deucey} from
facing diamonds or a facing hourglass) the people who collided can be
designated as the @strong{outer pairs}, and the others as the @strong{center
4}.

You can also use designators like @strong{center line}, @strong{center box},
@strong{center diamond}, and so on.

@unnumberedsec Why is the Roll direction wrong after @strong{spin chain and exchange the gears}?

@code{Sd} defines this call in terms of @strong{3/4 exchange the
diamonds} and @strong{interlocked flip the diamond}, and sets the roll
direction accordingly.  We consider the Callerlab definition to be an
attempt to give precision to a definition that was never
intended to be precise.  Accordingly, we consider attempts to deduce
roll direction from the Callerlab definition to be misguided.

@unnumberedsec How does @strong{common spot} work?

@c See ``Sd Application Note 4'' on the local disk (C:\Sd\appnote4.html) or on the web page.
See @uref{appnote4.html,Sd Application Note 4}.

@unnumberedsec How can I make Sd understand @strong{common spot} better?

Try saying (to the program, not necessarily to the dancers) @strong{initially common
spot}.  This tells @code{Sd} to reassemble the different groups of people
after the first part of the call.  Otherwise, it keeps the groups separate
through the whole call, which makes it much harder to figure out what is
happening.

@unnumberedsec Sd doesn't allow something.  Does that mean it's bogus?

No, no, 1000 times, no!  @code{Sd}, like many other computer programs,
is an attempt at approximating human knowledge and judgement.  It really
doesn't come close.

@unnumberedsec Sd allows something.  Does that mean it's legal?

No, no, 1000 times, no!  While we attempt to enforce the ``rules'' of square
dancing accurately, there are many things that @code{Sd} allows that are not
legal or appropriate.  You should not use @code{Sd}, or any other choreography
program, if you do not understand the level that you are calling.  If you
call beyond your knowledge and ability, the dancers will notice.

@unnumberedsec Why is @code{Sd} so fussy with apostrophes?  Why can't I just type @strong{lockers choice}?

You can.  You never need to type apostrophes or hyphens.  You can type
either @strong{lockers choice} or @strong{locker's choice}.  You can type either
@strong{tandem based triangles} or @strong{tandem-based triangles}.

@unnumberedsec Why is @code{Sd} so fussy with spaces in call names?  Why can't I just type @strong{inroll circulate}?

Sorry.  The parser (the part of the program that interprets your keystrokes as
call and concept names) has a very hard job to do when it completes your
input.  That is, it lets you type @strong{fe w} at Mainstream, and figures out that
you meant @strong{ferris wheel}.  In order to do this, it must take clues from
the spaces that you typed.  Unlike apostrophes and hyphens, it can't make
spaces optional.

We are aware that there are programs that spell some calls with shorter names,
such as @strong{inroll circulate}.  We believe that spelling the calls the way they
are spelled in the Callerlab lists and other commonly accepted literature is
more important.  You can always define your own ``hot keys'' (accelerator keys)
or abbreviations for any calls.

@unnumberedsec Why is @strong{leftrigger} spelled as one word?

When there is no ``official'' Callerlab spelling to go by, I use the
principle that a call should be one word if the English phrase or word
from which it was derived is one word.  The ``rigger'' names are derived
from ``outrigger'', which is a single word.  This seems to be compatible
with the Callerlab spelling of things like @strong{crossfire} and
@strong{cross fold}.  ``Crossfire'' is a single word.

I realize that these decisions are not always straightforward or without
controversy.

@unnumberedsec Who rolls on @strong{[swing thru] and centers roll}?

The @emph{new} centers.  @code{Sd} re-evaluates people's positions
before deciding who should roll.  We believe that this is usually the
more natural thing to do, but it is not automatically assumed.
Therefore, you may need to make that clear to the dancers by saying
something like ``swing thru and the new centers roll.''  Of course, if
you have the girls roll there will be no problem.

@unnumberedsec When I say @strong{patch the centers}, is it the original centers that do the U-turn back?

Yes.  People's positions are not re-evaluated after the hinge.  We
believe that this the right way of handling this sort of
thing in general.  There are exceptions, such as @strong{tap the
centers}, but those are best left as exceptions rooted in history.

@unnumberedsec How can I do 3x1 triangles circulate?

You try to circulate in 3x1 triangles, by typing @strong{3x1
triangles circulate}.  It doesn't allow it.

So you try leaving off the @strong{circulate} and typing a question
mark.  You get

@example
@group
3x1 triangles?
3x1 triangles are solid
3x1 triangles are solid <N/4> trianglesome
3x1 triangles are trianglesome
3x1 triangles are trianglesome <N/4> solid
@end group
@end example

What happened to plain 3x1 triangles?

The reason is that the call is known to @code{Sd} as @strong{3x1 triangle
circulate}, without the s.  That is, it is the @strong{3x1} variant of the
call @strong{triangle circulate}.

Now this fussiness about spelling, some of which you may not agree with
at all, can be extremely annoying.  When you run into problems like
this, try typing a little less, followed by a question mark.  Most of
the annoying spelling habits of @code{Sd} occur at the ends of words.
So if you tried just @code{triang}, you might get

@example
@group
3x1 triang?
3x1 triangles are solid
3x1 triangles are solid <N/4> trianglesome
3x1 triangles are trianglesome
3x1 triangles are trianglesome <N/4> solid
3x1 triangular boxes
3x1 triangle
3x1 triangle circulate
@end group
@end example

@unnumberedsec How can I do @strong{line to line but replace the last part with <anything>}?

@code{Sd} recognizes the call @strong{line to line but <anything>}.  The <anything>
replaces the final @strong{pass in}.  (Note that this is an exception to the general
principle the @strong{but} calls replace the last thing done in the center.  This
is one of a handful of exceptions that are justified by longstanding usage.)

Suppose you didn't know that.  You do the usual thing---type something like
@strong{line to l?}.  It will list

@example
@group
line to line
line to line but <ANYTHING>
@end group
@end example

Of course, when you see the ``<ANYTHING>'', you know that you can type
square brackets with a call inside.

@unnumberedsec Is there some way to add one extra circulate to @strong{along}?

@code{Sd} allows you to replace that circulate with anything, but does
not single out ``add an extra circulate'' for special treatment.  To
make modifications of this type, give the @strong{allow modifications}
command.  This tells the program that you want to do something complex
to the next call (and only that call.)  After giving that command, type
@strong{along}, or @strong{swing along}, or @strong{[split recycle] along}, or
whatever.  The program will then ask you about substitutions.  It will
ask

@example
@group
The ``column circulate'' can be replaced.
Do you want to replace it?
@end group
@end example

Type ``y''.  Just the letter, without @strong{<ENTER>}.  Then type the
replacement call.  It might be @strong{twice circulate}, or @strong{grand
cross back}, or @strong{remake the column}, or @strong{invert the column}, or
whatever.

When the program asks about things you don't want to replace (it does this a lot),
type ``n''.  When using @code{Sd} instead of @code{Sdtty}, there will be a popup
window.

@unnumberedsec How can I do a @strong{turn the key but do a criss cross the deucey after each part}?

The concept @strong{add} (and @strong{follow it by}, which is identical) is
followed by two calls.  It performs the first call (first in textual order, that is)
@emph{after} the second.  For example:

@example
@group
add
roll
swing thru
@end group
@end example

does a @strong{swing thru} and @strong{roll}.

You must type this on 3 lines: one with the ``add'' concept, and then each of
the two calls on its own line.  This is because ``add'' operates
on two calls.

There is also a concept @strong{precede it by}, which performs the first call
@emph{before} the second.

There is really only one context in which these concepts are sensible---they can be
the subject of the @strong{piecewise}, @strong{random}, or @strong{reverse random}
meta-concepts.  For example:

@example
@group
piecewise add
criss cross the deucey
turn the key
@end group
@end example

will do a @strong{criss cross the deucey}
after each of the three parts of @strong{turn the key}.

These concepts are among the situations in which the program does not attempt
to print out the exact words that are appropriate to use when calling, but
instead prints out an unambiguous description of what is supposed to happen.
The exact words you should use depend on the context and on your judgement.
You might say ``piecewise add a criss cross the deucey, and turn the key,''
or ``do a criss cross the deucey after each part, and turn the key,'' or
something similar.

@unnumberedsec What is the difference between ``initially centers'' and ``centers start''?

A very profound question.  A lot of discussion went on among challenge callers
over how these should be used.  Of course, before computers were in common use,
these sorts of things were used in an imprecise way, only in situations in which
the meaning would be simple and obvious.  As challenge choreography became more
complex, it became necessary to work out a really precise meaning.

@strong{Initially <concept>} always means to apply the concept to the first part.
When you apply the @strong{centers} concept to something, it means only the centers do
it, as though they are the only people present.  For example, on @strong{centers trade}
from waves, the centers trade with each other.  The ends do not enter into their
thinking.  So @strong{initially centers recycle} applies the @strong{centers} concept
to the first part or recycle.  As such, the very center 2 are the ones who fold.

@example
@group
 2G^                    3BV         1B>   2G>   1G>   4B>
     2BV  3G^  1GV  4B^
 1B^                    4GV         2B<   3G<   4G<   3B<

                 initially centers, 2/3 recycle
@end group
@end example

@strong{Anyone start} means that the designated people do the first part of the
call, while the others wait.  Then the ohers join in for the rest of the call.
When doing the first part, they are aware of the whole setup.
For example, from C1 phantoms, one could call @strong{girls start, 1/4 thru}.
The girls are aware of the rest of the setup (even though the boys aren't precisely
where they need to be for a 1/4 thru) when they start the call.  Everyone
joins in after the first part.

@example
@group
    3G>
             2B^   3BV
    2G<                             2G^   2BV   3G^   3BV

                4G>                 1B^   1GV   4B^   4GV
 1B^   4BV
                1G<

                  girls start 1/4 thru
@end group
@end example

So, on @strong{centers start, recycle}, the centers are aware of the ends, and of
the general setup that the ends make part of.  The person in the center wave that
is closer to the ends considers herself to be the ``center'' of the 4-person
formation doing the recycle.

@example
@group
 2G^                    3BV         1B>   2G>   3G>   2B>
     1G^  4BV  2B^  3GV
 1B^                    4GV         4B<   1G<   4G<   3B<

                 centers start, 2/3 recycle
@end group
@end example

@unnumberedsec How can I say something like ``initially use ah so in spin chain the gears''?

@example
@group
initially use
ah so
spin chain the gears
@end group
@end example

You must type this on 3 lines: one with the ``use'' concept, and then each of
the two calls on its own line.  This is because the ``use'' concept operates
on two calls: the call to be used, and the call in which it is to be used.
(The ``use'' concept is like ``checkpoint'' in this regard.)  Such concepts
are very hard for @code{Sd} to understand, so you have to write them on
separate lines.  That is, you must press @strong{<ENTER>} after the concept and
then after each of the two calls.

@unnumberedsec How can I start a sequence with all 4 ladies chain?

@code{Sd} is very strongly oriented toward the @strong{heads pass the ocean}
style of sequence openings.  That is, you start with the heads or sides
doing some call, either by themselves in the center, or something like
@strong{split square thru 4}.  @code{Sd} is somewhat unwieldy with calls
like @strong{all 4 ladies chain}.

First, you have to give the startup command @strong{just as they are}.  This
will leave the dancers in a squared set.  Then, after doing the @strong{4 ladies
chain} and whatever other thar/alamo/squared set calls you want, you may
very well want to go into the more ``normal'' style of calling by having
some people move in and pass the ocean or whatever.  To do this, use
the call @strong{<anyone> press ahead}, and then have those same people
(or just give the designator @strong{centers}) do the desired call.

The sequence might look like:

@example
@group
just as they are
all 4 ladies chain
heads press ahead
heads pass the ocean
etc...
@end group
@end example

(You would presumably say something like @strong{heads move in and pass
the ocean} when calling this.)

The call @strong{press ahead} is actually a Challenge call, but
Sd recognizes it at Mainstream, just for the purpose of
dealing with this issue, and other similar issues of
brute-force moving people around.

If you had the ladies chain 3/4, @strong{heads} won't do.  In that
case, use the designator @strong{headliners} or @strong{sideliners}.  These
are also Challenge terms that Sd recognizes at Mainstream.
They mean "whoever is facing head/side walls right now".
When calling, you would presumably say
@strong{All 4 ladies chain 3/4, @strong{*AT*} the heads, square thru ....}
or whatever terminology you like to use.

@unnumberedsec I can't seem to get it to do anything after things like @strong{all 4 couples right and left thru}.

This is really the same problem as the @strong{all 4 ladies chain}
problem of the previous question.  You need to start the sequence with
@strong{just as they are}, then do the @strong{all four couples} calls,
and then have some people @strong{press ahead} to do the rest of the sequence.

@unnumberedsec Why can't I do @strong{split phantom lines load the boat} from an 8-chain?

There are two reasons, one very simple and one more serious.  First,
without knowing the facing directions of the phantoms, we can't tell
where they went, so the live dancers don't know whether to leave room
for them.  If the ends were facing out of their split phantom lines,
they would go into spots that require the centers to move outward.  So
it is necessary to give the @strong{assume facing lines} or
@strong{assume inverted lines} command.

Even if this is done, @code{Sd} still won't be able to figure out where the
phantoms went.  The problem is that it is too hard to track them through
something as complicated as ``pass three moving dancers and quarter in''.
Sometimes @code{Sd} can track phantoms and sometimes it can't.  For example,
it @emph{can} do a @strong{split phantom lines hocus pocus} from an 8-chain,
even though that's a C2 call and @strong{load the boat} is ``only'' Plus.
When you run into a problem like this, give the @strong{with active phantoms}
command after the @strong{assume} command.

@unnumberedsec What are active phantoms?

The concept @strong{with active phantoms}, used after one of the
@strong{assume} concepts (either an explicit one like @strong{assume waves},
or an implicit one like @strong{split phantom waves}), effectively places
invisible but otherwise intelligent dancers on the phantom spots, with
facing directions deduced from the assumption.  Those phantoms proceed
through the entire call, interacting with each other and with the live
dancers as necessary.  If the call is impossible for the phantoms to do,
or if illegal collisions occur between live dancers and phantoms, it is
an error.  At the end of the call, any live dancers or phantoms that
come to the same spot may take right hands with each other, if that is
appropriate for the call.  @emph{Note that this is contrary to what dancers
generally expect when working with phantoms}.

Most of the types of @strong{assume} concepts are sufficiently explicit
that, if even a single live dancer is present in the setup, everyone's
facing direction may be inferred.  This is necessary for the @strong{with
active phantoms} concept, of course.  For example, a single live dancer
can determine the handedness of all the phantoms when @strong{assume
two-faced lines} is given.  Two of the concepts are not sufficiently
explicit for this, and may not be used with @strong{with active phantoms}.
They are @strong{assume general diamonds} and @strong{assume general 1/4
tags}.  If you are going to use @strong{with active phantoms}, you must
give more detailed assumptions than these two, such as @strong{assume left
1/4 lines} or @strong{assume facing diamonds}.

You can put @code{Sd} into a mode in which there is an implicit @strong{with
active phantoms} whenever any assumption is made.  The @strong{toggle
active phantoms} command toggles (turns on or off) this mode.  When in
this mode, @code{Sd} will not actually insert the text @strong{with active
phantoms} after each @strong{assume} concept.

Beware: The @strong{with active phantoms} operation @emph{is almost never
the right thing}.  While callers certainly have different philosophies
on this subject, I have found that it is almost never necessary to use
this in order to make @code{Sd} perform the material that top-notch
callers call.  In nearly all cases, giving an appropriate @strong{assume}
command is all that is required.

@unnumberedsec What are Head Corners?  What are Headliners?

These are obscure designators that are only in dancers' vocabulary at
high challenge levels, but that @code{Sd} makes available at all levels
for emergency operations.  Head Corners are the Head Boys and Side Girls,
that is, the Head Boys and their original corners.  Headliners are those
people facing the head walls at any given instant.  Side Corners and Sideliners
are analogous.

@unnumberedsec The resolver seems befuddled at times.  Why?

Especially at very high levels, the resolver seems to
take a longer time to find a resolve than one might expect.  The reason
is that it starts its resolve search looking only for ``high quality''
resolves, and throwing away huge numbers of ``low quality'' ones.
It assumes that you would press F12 to throw away the low quality
resolves anyway.  So it is initially reluctant to show a lot of resolves.
After it has shown all the high quality resolves it can, it lowers its standards
and shows the ones that it skipped.

Things that make a resolve high in quality are brevity, short promenade
distance, and avoidance of such things as @strong{extend}, @strong{slip the
clutch}, and @strong{reverse single file promenade}.  The promenade distance
criterion is only applied at C2 and above.

@unnumberedsec How can I use ``minigrand'' getouts?

Mini-grand (right and left grand, but on the 3rd hand, promenade) can be
added to @code{Sd's} repertoire of resolves by giving the @strong{toggle
minigrand getouts} command.  You can also start the program (@code{Sd} or
@code{Sdtty}) with a command-line argument of "-minigrand_getouts", either
on the command line or in a script or Windows shortcut, or put the line
"minigrand_getouts" in the ``[Options]'' section of the "sd.ini" file.

@unnumberedsec Why are Sd and Sdtty no longer compiled with Microsoft Visual C++?

I'm glad you asked.  The Microsoft compiler is not of acceptably high
quality for the compilation of Sd and Sdtty.  Microsoft may know how to
write software that aggressively propagates email viruses
(@uref{http://www.securityworld.com/community/hottopics/lovebugvirus.html,here}),
and they may know how to write software that deletes competitors'
products (@uref{http://www.dotcomeon.com/bluemountain.html,here}), and
they may know how to write software that makes competing web browsers
look defective
(@uref{http://news.zdnet.com/2100-3513_22-5218163.html,here}), but they
don't know how, or can't be bothered, to write compilers that generate
correct code.  Compilations of Sd and Sdtty have been observed to crash
on ``snag bits and pieces'' from waves.  At first this was believed to
occur only with Visual C++ version 6, service pack 3, which caused me to
revert to version 5.

The bug was eventually tracked down to incorrect restoration of the ECX
register upon exit from a ``switch'' statement.  Bugs of this type, in
which the compiler generates incorrect object code without giving any
warning or error message, are inexcusable.  The bug was reported to
Microsoft in detail on 17 December 2001.  No reply or fix was
forthcoming.  Over a year later a followup message was sent to Microsoft
management asking about it.  They gave me their customer support website
(http://support.microsoft.com) and phone number (800-936-5800).  Both contact
points want me to pay them money before I can even find out whether they intend
to fix this bug.

The bug was subsequently observed with version 5 also, creating a
serious problem, since those are the only Microsoft compilers that I
have.  As of Sd version
35, Gcc is used for the compilation of Sd/Sdtty for Windows.  It has
always been used for the Linux release, of course.

No version of Sd or Sdtty suffering from this Microsoft compiler bug was
ever released---the code was modified to avoid the bug.  But that is not
a workable solution in the long run, since I don't know what other parts
of the program could be getting compiled incorrectly.

@unnumberedsec So what software is used in the preparation of Sd and Sdtty?

@example
  computer:             Compaq Armada 7710MT
  OS:                   Windows NT4.0 Workstation    commercial
  editor:               GNU Emacs 20.7               free
  development system:   MingW 2.0.0-3                free
  compiler/linker:      GCC 3.2                      free
  compress utilities:   Winzip 8.0                   commercial
                        Winzip Self Extractor 2.1    commercial
                        gzip 1.2.4                   free
  document preprocessor:texinfo 1999-03-26.17        free
  Postscript formatter: MiKTeX 1.20d                 free
  PDF formatter:        MiKTeX 1.20d                 free
  HTML formatter:       Perl 5.004-02                free
                        Texi2html 1.51               free
  postscript viewer:    GSView 2.7                   free
                        Ghostscript 5.50             free
  PDF viewer:           Acrobat 4.0                  free
  HTML viewer:          Firefox 1.0                  free
  Zip disk software:    Iomega 2.8.0.2               commercial
  mailer for upload:    Netscape 4.76                free
@end example

Microsoft Frontpage is not used at any point in the preparation, so there
is no danger of running afoul of Microsoft's licensing restrictions against
making web pages that "disparage Microsoft, MSN, MSNBC, Expedia, or their
products or services".

The Compaq Armada on which Sd is developed has no internet connections,
and runs no mail or internet software, Microsoft or otherwise.  It has
never been exposed to a virus.  The released files are written onto a
Zip disk and transferred to another computer for upload.

@unnumberedsec Is free software actually that much higher in quality than commercial software?

It sure is.  A worldwide network of hobby programmers who take pride in
their work make vastly better products than big companies that are
managed by a philosophy of getting the most possible money from the least
possible work.

@bye
