==============================================================
*********** DO NOT RENAME THIS TO HOWTOBUILD.TXT **************
Doing so might cause it to be included in the "do_pack" script.
===============================================================
          HOW TO RELEASE A NEW VERSION OF SD

     This file is \wba\sddoc\howtobuild.

-----------------------------------------------------------------

                    UPDATING VERSION NUMBERS

Be sure the version numbers and dates are correct in:
    [sd]    sdmain.cpp   (version # and date are visible)
    [sd]    sd.rc        (SD & UI version #'s, and the year, are visible in "about" dialog)
    [sd]    sd_calls.txt (version # is visible)
    [sddoc] title.lst    (version # is visible)
    [sddoc] about.lst    (version # and year are visible)
    [sddoc] sd_doc.txi         (version # and date, with year (two places!), are visible)
    [sddoc] relnotes.txi       (version #, database format version #,
                               and UI version # are visible.
                               Also, check its claimed database format
                               version against database.h)
    [sddoc] index2.htmli       (version # and date (with year) are visible)
             ==> Be sure to run do_index <num> after editing this!!!

    [When rolling the year, fix copyright notices in sd.rc,
          sdutil.cpp, about.lst, sd_doc.txi, and relnotes.txi]

-----------------------------------------------------------------

               BUILDING THE DOCUMENTATION

It is important that this be done before "new_binary" is run, because
the manual and faq files are now wrapped into the binary distribution file.

WARNING!!!!!  These scripts require "tar".  I have put tar.exe and
cygwinB19.dll into the \bin directory.


Go to sddoc directory and do:

    setmingw64
    settex
    clean clean
    do_plain
    do_ps
    do_pdf
    do_index <poster-child-number>
            (It is important that a poster child number
             always be loaded before running "do_html")
    do_html

-----------------------------------------------------------------
                POSTER CHILD LOG
10 Jun 00  -  21 Aug 00  # 4
21 Aug 00  -  14 Sep 00  # 5
14 Sep 00  -  09 Oct 00  # 8
09 Oct 00  -  11 Dec 00  # 9
11 Dec 00  -  19 Feb 01  # 7
19 Feb 01  -  12 Mar 01  #10
12 Mar 01  -  27 May 01  #11
27 May 01  -  16 Sep 01  # 5
16 Sep 01  -   7 Apr 02  #14
 7 Apr 02  -  30 Apr 02  #15
30 Apr 02  -  15 May 02  #12
15 May 02  -  15 Jul 02  #16
15 Jul 02  -   1 Sep 02  #17
 1 Sep 02  -  16 Jan 03  #18
16 Jan 03  -   1 May 03  #19
 1 May 03  -  11 Oct 03  #20
11 Oct 03  -  27 Feb 05  #21
27 Feb 05  -   8 Oct 05  #22
 8 Oct 05  -  20 Nov 05  #23
20 Nov 05  -   7 Jul 06  #24
 7 Jul 06  -   8 Apr 07  #27
 8 Apr 07  -  23 Jun 07  #28
23 Jun 07  -  13 Oct 07  #31
13 Oct 07  -  30 Mar 08  #33
30 Mar 08  -  10 Mar 09  #32
10 Mar 09  -   9 May 09  #34
 9 May 09  -   6 Jun 09  #35
 6 Jun 09  -   1 Sep 09  #37
 1 Sep 09  -  19 Sep 09  #38
19 Sep 09  -   9 Jan 10  #39
 9 Jan 10  -  23 May 10  #40
23 May 10  -  16 Oct 10  #41
16 Oct 10  -  28 Nov 10  #35
28 Nov 10  -   6 May 11  #42
 6 May 11  -  25 Apr 12  #43
25 Apr 12  -  16 Jun 12  #44
16 Jun 12  -   7 Jul 13  #46
 7 Jul 13  -  24 Aug 13  #36
24 Aug 13  -  26 Jul 14  #45
26 Jul 14  -  21 May 15  #48
21 May 15  -  13 Jun 15  #29
13 Jun 15  -  17 Oct 15  #49
17 Oct 15  -   1 Jan 16  #50
 1 Jan 16  -  21 Jan 16  #51
22 Jan 16  -  13 Feb 17  #52
13 Feb 17  -   3 Mar 17  #53
 3 Mar 17  -   5 Oct 17  #56
 5 Oct 17  -   5 Dec 17  #57  // 45 degree load the boat
 5 Dec 17  -  14 Dec 18  #59  // fly the coop
14 Dec 18  -  24 Dec 18  #58  // Risha
24 Dec 18  -  21 Jan 19  #61  // (1-3/4, swing thru) TWICE
21 Jan 19  -  30 Jun 20  #62  // hairy interrupted swing the fractions
30 Jun 20  -  14 Aug 20  #67  // thirdly split 5 times grand chain 8
14 Aug 20  -  26 Dec 20  #63  // hairy interrupted scoot and plenty
26 Dec 20                #69  // initially as couples regroup
                         #64  // hairy [boys trade] and circle 1/2
                         #65  // middle half tandem, slide thru
                         #66  // twisted split grand chain 8
                         #60  // really hairy fly the coop with interruption
                         #68  // echo split grand chain 8


(#25, #26, #48, #30, #47 are also available.)
Also, do [DPT] initially touch by 1/2 x [split sidetrack]
BUG!!!!!  [H star thru] initially touch by 1/2 x [pass the music] FAILS!
-----------------------------------------------------------------

               TESTING AND PRODUCTION BUILD - MSVC++
   Don't do this for production release versions!  As of version 35,
   use "mingw", below.

   Set project configuration to "sdtty release", "sd release", "deploy release",
   and "mkcalls release", issuing "build / rebuild all" in each case.

   mkcalls
   // Do regression test if desired.
   // Be sure to test resolver:
   // sdtty c4 -resolve_test 60   (or whatever)
   // Then perform a resolve.  Also do "heads start" and "pick random call".
   // Can do it on two processors with different arguments to get different
   // deterministic random numbers.

-----------------------------------------------------------------

               TESTING AND PRODUCTION BUILD - MINGW 64 BITS
               32 BIT COMPILERS MAY NO LONGER BE USED!!!!
                    Yes, the make utility for 64-bit mingw
                    is still called "mingw32-make".


   THE DOCUMENTATION MUST HAVE BEEN PREPARED BEFORE DOING THIS!
   This is because the html files from document preparation are
   needed by this step.

   In directory sd:
   setmingw64
   mingw64 clean
   mingw64 all
   mingw64 cleanup   // optional: remove .o files etc. after building
   mingw64 savesource    // This packs the "official" source distribution.

DO A VIRUS SCAN ON SD.EXE, SDTTY.EXE, SDLIB.DLL, MKCALLS.EXE and DEPLOY.EXE!

   // Test that Sd comes up.

   // Do regression test if desired.
   // Be sure to test resolver:
   // sdtty c4 -resolve_test 60   (or whatever)
   // Then perform a resolve.  Also do "heads start" and "pick random call".
   // Can do it on two processors with different arguments to get different
   // deterministic random numbers.

Stress tests to try:

   sdtty c4 -resolve_test 240 <today's date>+100     two-couple, girls UTB, resolve
   sdtty c4 -resolve_test 240 <today's date>+101     two-couple, girls UTB, pick random call
   sdtty c4 -resolve_test 240 <today's date>+126     S 1P, 1/2 tag, resolve
   sdtty c4 -resolve_test 240 <today's date>+127     H start, pick random call

-----------------------------------------------------------------

                        SAVING SOURCES

BE SURE TO DELETE *~ and funny .h, .cpp, .cmd, and makefile files
BEFORE DOING THIS.

In \wba\sd:          save _vnnnn    (e.g.  save _v3201 -- Underscore, but no periods)
In \wba\sd\regress:  save _vnnnn
In \wba\sddoc:       save _vnnnn

-----------------------------------------------------------------

                        FINAL PREPARATION

   THE DOCUMENTATION MUST HAVE BEEN PREPARED, AND THE SOURCES SAVED,
   BEFORE DOING THIS!  This is because the html files from document
   preparation, and the source files from a source save, are needed
   by this step.

   cd sddoc
   new_binary     (this depends on all documentation, binaries, and database)
   # REMEMBER TO KEEP THE SDDOC DIRECTORY CLEAR OF SUPERFLUOUS HTML AND TXT FILES!
   # All html and txt files get uploaded.
   do_pack        (this depends on all of the above, and the result of "savesource")

DO A VIRUS SCAN ON INSTALL.EXE and PACK.ZIP!

Copy these into an appropriate directory:
   \wba\sd\sd_vnnnn.zip
   \wba\sd\regress\r_vnnnn.zip
   \wba\sddoc\doc_vnnnn.zip
   \wba\sddoc\sd_source.zip
   \wba\sddoc\pack.zip
   \wba\sddoc\install.exe

-----------------------------------------------------------------

               PRODUCTION BUILD, TESTING, AND UPLOAD - Linux

copy sd_vnnnn.zip, r_vnnnn.zip, doc_vnnnn.zip and this file onto a thumb drive.
Simplest way is to copy the entire vnnnn directory from the archive into
the home directory on Ubuntu.

Copy the vnnnn directory from the thumb drive into the home directory on Ubuntu.

Then, on Ubuntu, in the home directory, do
./make_linux.sh nnnn
as in
./make_linux.sh 3906

That will copy the files from the ~/vnnn directory down to the various things
under ~/sd, compile everything, and make the tarball.

Then, to do regression tests:

cd ~/sd/regress
chmod 775 *.sh
./doit.sh

-----------------------------------------------------------------

             UPLOADING TO LYNETTE'S WEB SITE
             THIS NO LONGER WORKS ON WINDOZE.
    BRING THE FILE (and sd_source too) OVER TO UBUNTU, as shown above.
-----------------------------------------------------------------
Now, in directory ~/vNNNN, do:

sftp USERNAME@www.challengedance.org
  challengedance.org> (P=PASSWORD)
  challengedance.org> cd public_html/sd
  challengedance.org> put pack.zip
  challengedance.org> (Check size)
(upload linux program:)
  challengedance.org> lcd ~/sd
  challengedance.org> put linux.tgz
  challengedance.org> quit


rsh USERNAME@www.challengedance.org
  challengedance.org> (P=PASSWORD)
  challengedance.org> cd public_html/sd
  challengedance.org> unzip pack.zip
  challengedance.org> rm pack.zip
  challengedance.org> exit

The c4 books (book1.pdf etc.) go into the same directory.
